include "physics/physics.cdn"
include "lreg.cdn"

integrator
{
    method = "runge-kutta"
}

defines
{
    n = 1

    l = "{1,1}"
    m = "{1,0.5}"
}

node "system"
{
    node "p{0:$(@n - 1)}" : physics.revoluteY
    {
        m = "@m[@@1]"
        com = "[0; 0; -$(@l[@@1] / 2)]"
        coordinateTransform = "Sp.Translate([0, 0, $(@@1 == 0 ? 0 : -@l[$(@@1 - 1)])])"

        q = "0"

        q_ref = "0"
        dq_ref = "0"

        tau = "τ"

        points = "[transformations.worldLocationᵀ;
                   (transformations.worldMatrix ∙ [com; 1])[[0, 1, 2]]]"
    }

    edge from "p{0:$(@num - 2)}" to "p$(@1 + 1)" : physics.joint {}

    include "physics/dynamics.cdn"
}

node | system . /p([0-9]+)/
{
    # Damping
    b = 5

    τ_damping = "-b ∙ dq"

    node "control" : "phase" . oscillator
    {
        r = "target_amplitude"
        target_amplitude = "0.2"
    }

    k = 50

    q_ref = "0.2 * sin(2 * pi * t + 0.1) + 0.1 * cos(4 * pi * t)"
    q_tot = "q_ref"
    q = "q_ref"

    τ_control = "k ∙ (q_tot - q)"

    # Joint torque
    τ = "τ_damping + τ_control"
}

node | system . /p([0-9]+)/
{
    node "learning" : lreg
    {
        signal = "q_ref - q"
    }

    q_tot = "q_ref + learning.output"
}

# vi:ts=4:et
