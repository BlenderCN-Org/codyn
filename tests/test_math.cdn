# multiplication

    ## 12
    test_multiply_1 = "3 * 4"

    ## 2 4 3 5
    test_multiply_2 = "[1, 0; 0, 1] * [2, 3; 4, 5]"

    ## 2 0 0 5
    test_multiply_3 = "[1, 0; 0, 1] .* [2, 3; 4, 5]"

    ## 30
    test_multiply_4 = "[1 2 3 4] * [1; 2; 3; 4]"

# plus
    ## 7
    test_plus_1 = "3 + 4"

    ## 4 6
    test_plus_2 = "[1, 2] + [3, 4]"

    ## 2 1 1 2
    test_plus_3 = "1 + eye(2)"

# minus
    ## -1
    test_minus_1 = "3 - 4"

    ## -2 -2
    test_minus_2 = "[1, 2] - [3, 4]"

    ## -1
    test_minus_3 = "3 + -4"

# priority
    ## 14
    test_priority_1 = "3 * 4 + 2"

    ## 11
    test_priority_2 = "3 + 4 * 2"

# scientific notation
    ## 1e-2
    test_scientific_notation_1 = "1e-2"

    ## 1e+30
    test_scientific_notation_2 = "1e+30"

    ## 1.25e-5
    test_scientific_notation_3 = "1.25e-5"

    ## 10.2523e+4
    test_scientific_notation_4 = "10.2523e+4"

# clip function
    ## 1
    test_clip_1 = "clip(0.2, 1, 10)"

    ## 10
    test_clip_2 = "clip(12, 1, 10)"

    ## 0.2
    test_clip_3 = "clip(0.2, -1, 10)"

    ## 1 5.2 10
    test_clip_4 = "clip([0.1, 5.2, 12], 1, 10)"

    ## 1 3 10
    test_clip_5 = "clip([0.1, 3, 13], [1, 2, 3], 10)"

    ## 1 3 10
    test_clip_6 = "clip([0.1, 3, 13], [1; 2; 3], 10)"

    ## 10 10 15 15
    test_clip_7 = "clip(15, 1, [10, 20; 10, 30])"

# cycle function
    ## 9.2
    test_cycle_1 = "cycle(0.2, 1, 10)"

    ## 3
    test_cycle_2 = "cycle(12, 1, 10)"

    ## 0.2
    test_cycle_3 = "cycle(0.2, -1, 10)"

    ## -3.8
    test_cycle_4 = "cycle(0.2, -5, -1)"

    ## 9.1 5.2 3
    test_cycle_5 = "cycle([0.1, 5.2, 12], 1, 10)"

    ## 9.1 3 6
    test_cycle_6 = "cycle([0.1, 3, 13], [1, 2, 3], 10)"

    ## 9.1 3 6
    test_cycle_7 = "cycle([0.1, 3, 13], [1; 2; 3], 10)"

    ## 6 6 15 5
    test_cycle_8 = "cycle(15, 1, [10, 20; 10, 11])"

# lerp function
    ## 2.8
    test_lerp_1 = "lerp(0.2, 1, 10)"

    ## 1.9 2.8 3.7
    test_lerp_2 = "lerp([0.1, 0.2, 0.3], 1, 10)"

    ## 1.9 3.6 5.1
    test_lerp_3 = "lerp([0.1, 0.2, 0.3], [1, 2, 3], 10)"

    ## 1.9 3.6 5.1
    test_lerp_4 = "lerp([0.1, 0.2, 0.3], [1; 2; 3], 10)"

    ## 1.9 1.9 2.9 3.9
    test_lerp_5 = "lerp(0.1, 1, [10, 20; 10, 30])"

# linsolve
    ## 0.05 0.3 0.05
    test_linsolve_1 = "linsolve([8 1 6; 3 5 7; 4 9 2], [1; 2; 3])"

    ## -11.71058180059284 11.71058180059284 -3.74130275707252
    test_linsolve_2 = "linsolve([ 2.762, 1.008, -0.246;
                                  1.008, 1.508,  0.254;
                                 -0.246, 0.254,  0.254],
                                [-19.62; 4.905; 4.905])"

    ## -2
    test_linsolve_3 = "linsolve(-2, 4)"

    ## -2 -4
    test_linsolve_4 = "linsolve(-2, [4, 8])"

    ## -11.71058180059284 11.71058180059284 -3.74130275707252
    test_slinsolve_1 = "slinsolve([ 2.762, 1.008, -0.246;
                                    1.008, 1.508,  0.254;
                                   -0.246, 0.254,  0.254],
                                  [-19.62; 4.905; 4.905],
                                  [-1; 0; 1])"

    ## -2
    test_slinsolve_2 = "slinsolve(-2, 4, -1)"

    ## -2 -4
    test_slinsolve_3 = "slinsolve(-2, [4, 8], -1)"

    A_b_1 = "[ 2.762,  1.008, -0.246,  0.230,  3.203;
               1.008,  1.508,  0.254,  0.123, -0.232;
              -0.246,  0.254,  0.254,  0,      0;
               0.230,  0.123,  0,      1.323, -4.235;
               3.203, -0.232,  0,     -4.235,  0.525]"
    b_b_1 = "[-19.62; 4.905; 4.905; 4.321; 5.320]"
    l_b_1 = "[-1; 0; 1; 1; 3]"

    ## -4.102936604248146 4.092892184141022 11.244421183398176 -4.913174919812310 -2.659121629100214
    test_linsolve_b_1 = "linsolve(A_b_1, b_b_1)"

    ## -4.102936604248146 4.092892184141022 11.244421183398176 -4.913174919812310 -2.659121629100214
    test_slinsolve_b_1 = "slinsolve(A_b_1, b_b_1, l_b_1)"

    ## 2.355008447839664 1.029675940805793 -0.968503937007874 -0.793789967315617 6.100952380952380 1.0080 1.244571814693761 1.0 0.053243062181530 -0.441904761904762 -0.2460 0.2540 0.2540 0 0 0.230 0.1230 0 -32.839333333333336 -8.066666666666666 3.2030 -0.2320 0 -4.2350 0.525
    test_sltdl_b_1 = "sltdl(A_b_1, l_b_1)"

    ## -8.331180305530603 3.941114479767422 19.311023622047244 -0.131580015834670 10.133333333333333
    test_sltdldinv_b_1 = "sltdldinv(test_sltdl_b_1, b_b_1)"

    ## -4.102936604248143 -0.131802923904716 19.311023622047244 -1.438386893765606 10.133333333333333
    test_sltdldinvlinvt_b_1 = "sltdldinvlinvt(test_sltdl_b_1, b_b_1, l_b_1)"

    ## -9.662450363954960 -0.164038204186037 4.905000000000000 47.235666666666667 5.320000000000000
    test_sltdllinvt_b_1 = "sltdllinvt(test_sltdl_b_1, b_b_1, l_b_1)"

    ## -19.620000000000001 25.107241958609670 -39.204289202704160 -12.589945603541395 34.556800958856435
    test_sltdllinv_b_1 = "sltdllinv(test_sltdl_b_1, b_b_1, l_b_1)"

# inverse
    ## -2 3 3 -4
    test_inverse_1 = "inv([4 3; 3 2])"

    ## -0.5
    test_inverse_2 = "inv(-2)"

# pseudo inverse
    ## -0.000650663468026  -0.040870849807820   0.076446323628971  -0.046285220558044   0.005760298827570 -0.036542220427636  -0.012740896943627   0.000350141166946  -0.040442026495438   0.041200519102015 -0.025678517960775  -0.030468433285146  -0.050507786941278   0.004922707242659  -0.032500032589552 0.058585803002776   0.041377052967076   0.004831761486861  -0.069331934844424  -0.029299649438993
    test_pseudo_inverse_1 = "pinv([ 0.12,  -8.19,   7.69,  -2.26,  -4.71;
                                   -6.91,   2.22,  -5.12,  -9.08,   9.96;
                                   -3.33,  -8.94,  -6.72,  -4.40,  -9.98;
                                    3.97,   3.33,  -2.74,  -7.92,  -3.20])"

# transpose
    ## 1 2 3 4
    test_transpose_1 = "transpose([1 2; 3 4])"

    ## 2 3 4
    test_transpose_2 = "transpose([2 3 4])"

    ## -2
    test_transpose_3 = "transpose(-2)"

    ## 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0
    test_transpose_4 = "transpose([1, 0, 0; 0, 1, 0; 0, 0, 1; 0, 0, 0; 0, 0, 0; 0, 0, 0])"

# diagonal
    ## 1 4
    test_diag_1 = "diag([1 2; 3 4])"

    ## -2 0 0 -3
    test_diag_2 = "diag([-2, -3])"

    ## -4
    test_diag_3 = "diag(-4)"

    ## 1 4 7 0 5 8 0 0 9
    test_tril_1 = "tril([1 2 3; 4 5 6; 7 8 9])"

    ## 1 4 7 0 5 8
    test_tril_2 = "tril([1 2; 4 5; 7 8])"

    ## 1 4 0 5 0 0
    test_tril_3 = "tril([1 2 3; 4 5 6])"

    ## -2
    test_tril_4 = "tril(-2)"

    ## 1 0 0 2 5 0 3 6 9
    test_triu_1 = "triu([1 2 3; 4 5 6; 7 8 9])"

    ## 1 0 0 2 5 0
    test_triu_2 = "triu([1 2; 4 5; 7 8])"

    ## 1 0 2 5 3 6
    test_triu_3 = "triu([1 2 3; 4 5 6])"

    ## -2
    test_triu_4 = "triu(-2)"

# qr decomposition
    ## -0.169030850945703 -0.507092552837110 -0.845154254728517 0.897085227145061 0.276026223736941 -0.345032779671177 0.408248290463863 -0.816496580927726 0.408248290463863 -5.916079783099615 0 0 -7.437357441610946 0.828078671210825 0
    test_qr_1 = "qr([1, 2; 3, 4; 5, 6])"

    ## 1 3
    test_qr_2 = "qr(3)"

# column wise operations
    ## 2 6 10 3 7 11 4 8 12
    test_cwise_plus_1 = "[1; 2; 3] + [1, 2, 3;
                                      4, 5, 6;
                                      7, 8, 9]"

    ## 2 6 10 3 7 11 4 8 12
    test_cwise_plus_2 = "[1, 2, 3;
                          4, 5, 6;
                          7, 8, 9] + [1; 2; 3]"

    ## 2 5 8 4 7 10 6 9 12
    test_rwise_plus_1 = "[1, 2, 3] + [1, 2, 3;
                                      4, 5, 6;
                                      7, 8, 9]"

    ## 2 5 8 4 7 10 6 9 12
    test_rwise_plus_2 = "[1, 2, 3;
                          4, 5, 6;
                          7, 8, 9] + [1, 2, 3]"

# min
    ## -2
    test_min_1 = "min([-1, 2, 3, -2])"

    ## 3
    test_min_2 = "min([5, 3])"

    ## 3
    test_min_3 = "min(5, 3)"

     ## -1 3
    test_min_4 = "min([1, 3], [-1, 5])"

    ## -1 3
    test_min_5 = "min([1; 3], [-1; 5])"

    ## 0 -1
    test_min_6 = "min(0, [1, -1])"

    ## -2 1
    test_min_7 = "min([-2, 2], 1)"

# vi:ts=4:et
