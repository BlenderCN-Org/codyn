<?xml version="1.0" encoding="UTF-8"?>

<language id="cpg" _name="CPG" version="2.0" _section="Sources">
    <metadata>
      <property name="mimetypes">text/x-cpg</property>
      <property name="globs">*.cpg</property>
      <property name="line-comment-start">#</property>
    </metadata>

    <styles>
        <style id="comment"           _name="Comment"             map-to="def:comment"/>
        <style id="error"             _name="Error"               map-to="def:error"/>
        <style id="string"            _name="String"              map-to="def:string"/>
        <style id="keyword"           _name="Keyword"             map-to="def:keyword"/>
        <style id="preprocessor"      _name="Preprocessor"        map-to="def:preprocessor"/>
        <style id="specifiers"        _name="Specifiers"          map-to="def:keyword"/>
        <style id="regex"             _name="Regex"               map-to="def:builtin"/>
        <style id="property"          _name="Property"            map-to="def:identifier"/>
        <style id="operator"          _name="Operator"            map-to="def:operator"/>
        <style id="selector"          _name="Selector"            map-to="def:identifier"/>
        <style id="define"            _name="Define"              map-to="def:constant"/>
    </styles>

    <default-regex-options case-sensitive="false"/>

    <definitions>

        <define-regex id="identifier">[a-z_][a-z0-9_-]*</define-regex>
        <define-regex id="nth">[-+]?[0-9]n([-+][0-9])?</define-regex>
        <define-regex id="string">"(\\["]|[^"])*"</define-regex>
        <define-regex id="regex">/(\\/|[^/])*/</define-regex>
        <define-regex id="identifier_or_string">((\%{identifier})|(\%{string}))</define-regex>

        <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
            <start>"</start>
            <end>"</end>
            <include>
                <context id="escape-in-string">
                    <match>\\"</match>
                </context>
                <context ref="defined"/>
                <context ref="simple_defined"/>
                <context ref="expansion"/>
            </include>
        </context>

        <context id="specifiers" style-ref="specifiers">
            <keyword>integrated</keyword>
            <keyword>in</keyword>
            <keyword>out</keyword>
            <keyword>once</keyword>
            <keyword>bidirectional</keyword>
            <keyword>all</keyword>
        </context>

        <context id="preprocessor" style-ref="preprocessor">
            <keyword>import</keyword>
        </context>

        <context id="regex" style-ref="regex">
            <start>/</start>
            <end>/</end>
            <include>
                <context ref="simple_defined"/>
                <context ref="defined"/>
            </include>
        </context>

        <context id="keywords" style-ref="keyword">
            <keyword>templates</keyword>
            <keyword>state</keyword>
            <keyword>link</keyword>
            <keyword>group</keyword>
            <keyword>network</keyword>
            <keyword>function</keyword>
            <keyword>interface</keyword>
            <keyword>from</keyword>
            <keyword>to</keyword>
            <keyword>polynomial</keyword>
            <keyword>input-file</keyword>
            <keyword>piece</keyword>
            <keyword>attach</keyword>
            <keyword>attach</keyword>
            <keyword>apply</keyword>
            <keyword>define</keyword>
            <keyword>remove</keyword>
            <keyword>integrator</keyword>
        </context>

        <context id="colon-error" style-ref="error">
            <match>:\s*[^a-z_" ]</match>
        </context>

        <context id="property">
            <match>(\%{identifier})\s*(=)\s*(\%{string}|\%{def:decimal}|\%{def:float})</match>
            <include>
                <context sub-pattern="1" style-ref="property"/>
                <context sub-pattern="3" style-ref="string"/>
            </include>
        </context>

        <context id="action">
            <match>(\%{identifier})\s*(&lt;)\s*(\%{string})</match>
            <include>
                <context sub-pattern="1" style-ref="property"/>
                <context sub-pattern="3" style-ref="string"/>
            </include>
        </context>

        <context id="selector">
            <match>([:.][a-z_-]+)(\(([^)]*)\))?</match>
            <include>
                <context sub-pattern="1" style-ref="selector"/>
                <context sub-pattern="3" style-ref="string"/>
            </include>
        </context>

        <context id="defined" extend-parent="true">
            <start>@{</start>
            <end>}</end>
            <include>
                <context sub-pattern="0" where="start" style-ref="define"/>
                <context sub-pattern="0" where="end" style-ref="define"/>
            </include>
        </context>

        <context id="simple_defined" style-ref="define">
            <match>@[a-z0-9_-]+</match>
        </context>

        <context id="define">
            <match>\b(define)\s+([a-z0-9_-]+)</match>
            <include>
                <context sub-pattern="1" style-ref="keyword"/>
                <context sub-pattern="2" style-ref="preprocessor"/>
            </include>
        </context>

        <context id="expansion" style-ref="comment" style-inside="true">
            <start>{</start>
            <end>}</end>
            <include>
                <context ref="defined" />
            </include>
        </context>

        <context id="cpg" class="no-spell-check">
            <include>
                <context ref="def:shebang"/>
                <context ref="def:shell-like-comment"/>
                <context ref="define"/>
                <context ref="keywords"/>
                <context ref="specifiers"/>
                <context ref="preprocessor"/>
                <context ref="property"/>
                <context ref="action"/>
                <context ref="regex"/>
                <context ref="string"/>
                <context ref="colon-error"/>
                <context ref="selector"/>
                <context ref="def:decimal"/>
                <context ref="def:float"/>
                <context ref="defined"/>
                <context ref="simple_defined"/>
            </include>
        </context>
    </definitions>
</language>

<!-- vi:ex:ts=4:et -->
