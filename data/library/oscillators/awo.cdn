## The AWO library contains an oscillator implementing a very simple, first
## order arbitrary waveform dynamical system. The implementation is simply
## a feedback/feedforward differential equation on a known function f(x) and
## its known derivative df(x)/dt.
##
## Two extensions to the standard oscillator are also available as the
## "<i>amplitude</i>" and "<i>offset</i>" templates. You can apply one of these
## templates, or both, to add direct amplitude and offset control on the
## oscillator.
templates
{
  ## Arbitrary Waveform Oscillator (AWO)
  ##
  ## This 'oscillator' implements a very simple feedforward/feedback dynamical
  ## system on a known function f(x) and its known derivative df(x)/dt
  ##
  ## $\dot{\theta} = \omega
  ## $\dot{r} = \gamma (f(\theta) - x) + \dot{f}(\theta) \dot{\theta}
  ##
  node "oscillator"
  {
    
    ## Time constant on attractor of r towards f. Use
    ## functions.GammaForRelConf to compute a γ value corresponding to a
    ## certain speed of convergence
    γ = "1"

    ## Angular frequency
    ω = "2 ∙ π"

    ## The function to capture as a dynamical system. Note that this function
    ## should be differentiable.
    g(φ) = "1"

    ## Feedback term of dynamical system (see ṙ)
    feedback = "γ ∙ (g(φ) - r)"

    ## Feedforward term of dynamical system (see ṙ)
    feedforward = "ġ(φ)"

    ## Amplitude state
    ṙ = "feedback + feedforward"

    ## Phase state
    φ̇ = "ω"

    ## Output variable
    "output" = "r"

    ## Function for γ such that it takes <i>τ</i> seconds to
    ## forget a perturbation of size (1 - <i>α</i>) * <i>δ</i>
    ##
    ## This function can be used for γ on the initial conditions of the
    ## oscillator nodes so there is a known behavior of convergence from
    ## initial conditions.
    γForRelConv(τ, α, δ) = "ln(α / δ) / -τ"
  }
}

# vi:ex:ts=2:et
