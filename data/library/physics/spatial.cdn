node "Sp"
{
    # Spatial inertia
    Inertia(com, m, I) = "[
        I + m ∙ C ∙ Cᵀ, m ∙ C;
        m ∙ Cᵀ, [m, 0, 0; 0, m, 0; 0, 0, m]
    ]"
    {
        C = "~com"
    }

    # Create a 6x6 translation matrix translating with 3d vector v
    Translate(v) = "[
         1,     0,     0,    0, 0, 0;
         0,     1,     0,    0, 0, 0;
         0,     0,     1,    0, 0, 0;
         0,     v[2], -v[1], 1, 0, 0;
        -v[2],  0,     v[0], 0, 1, 0;
         v[1], -v[0],  0,    0, 0, 1
    ]"

    # Spatial rotation on X axis
    RotateX(θ) = "[
        1,  0,  0,  0,   0, 0;
        0,  cθ, sθ, 0,   0, 0;
        0, -sθ, cθ, 0,   0, 0;
        0,  0,  0,  1,   0, 0;
        0,  0,  0,  0,  cθ, sθ;
        0,  0,  0,  0, -sθ, cθ
    ]"
    {
        cθ = "cos(θ)"
        sθ = "sin(θ)"
    }

    # Spatial rotation on Z axis
    RotateZ(θ) = "[
         cθ,  sθ, 0,  0,  0,  0;
        -sθ,  cθ, 0,  0,  0,  0;
         0,   0,  1,  0,  0,  0;
         0,   0,  0,  cθ, sθ, 0;
         0,   0,  0, -sθ, cθ, 0;
         0,   0,  0,   0, 0,  1
    ]"
    {
        cθ = "cos(θ)"
        sθ = "sin(θ)"
    }

    # Spatial rotation on Y axis
    RotateY(θ) = "[
        cθ, 0, -sθ, 0,  0,  0;
        0,  1,  0,  0,  0,  0;
        sθ, 0,  cθ, 0,  0,  0;
        0,  0,  0,  cθ, 0, -sθ;
        0,  0,  0,  0,  1,  0;
        0,  0,  0,  sθ, 0,  cθ
    ]"
    {
        cθ = "cos(θ)"
        sθ = "sin(θ)"
    }

    Rot3x3(v) = "[
        v[0, 0], v[0, 1], v[0, 2];
        v[1, 0], v[1, 1], v[1, 2];
        v[2, 0], v[2, 1], v[2, 2];
    ]"

    Trans3(v) = "[
        v[1, 2];
        v[2, 0];
        v[0, 1]
    ]"

    RotationPart(v) = "[
        v[0, 0], v[0, 1], v[0, 2], 0, 0, 0;
        v[1, 0], v[1, 1], v[1, 2], 0, 0, 0;
        v[2, 0], v[2, 1], v[2, 2], 0, 0, 0;
        0, 0, 0, v[3, 3], v[3, 4], v[3, 5];
        0, 0, 0, v[4, 3], v[4, 4], v[4, 5];
        0, 0, 0, v[5, 3], v[5, 4], v[5, 5];
    ]"

    # Spatial motion cross product
    CrossMotion(v) = "[
         0,    -v[2],  v[1],  0,     0,     0;
         v[2],  0,    -v[0],  0,     0,     0;
        -v[1],  v[0],  0,     0,     0,     0;
         0,    -v[5],  v[4],  0,    -v[2],  v[1];
         v[5],  0,    -v[3],  v[2],  0,    -v[0];
        -v[4],  v[3],  0,    -v[1],  v[0],  0
    ]"

    # Spatial force cross product (-CrossMotion(v)ᵀ)
    CrossForce(v) = "[
         0,    -v[2],  v[1], 0,    -v[5],  v[4];
         v[2],  0,    -v[0], v[5],  0,    -v[3];
        -v[1],  v[0],  0,   -v[4],  v[3],  0;
         0,     0,     0,    0,    -v[2],  v[1];
         0,     0,     0,    v[2],  0,    -v[0];
         0,     0,     0,   -v[1],  v[0],  0
    ]"

    # Spatial inverse. The spatial inverse can be computed by transposing
    # each 3x3 block matrix in the spatial 6x6 matrix since each block
    # represents an orthogonal space
    Inverse(v) = "[
        v[0, 0], v[1, 0], v[2, 0], v[0, 3], v[1, 3], v[2, 3];
        v[0, 1], v[1, 1], v[2, 1], v[0, 4], v[1, 4], v[2, 4];
        v[0, 2], v[1, 2], v[2, 2], v[0, 5], v[1, 5], v[2, 5];
        v[3, 0], v[4, 0], v[5, 0], v[3, 3], v[4, 3], v[5, 3];
        v[3, 1], v[4, 1], v[5, 1], v[3, 4], v[4, 4], v[5, 4];
        v[3, 2], v[4, 2], v[5, 2], v[3, 5], v[4, 5], v[5, 5]
    ]"
}

# vi:ex:ts=4:et
