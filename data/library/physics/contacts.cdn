require "spatial.cdn"
require "sensors.cdn"

templates
{
    node "physics"
    {
        node "contacts"
        {
            node "soft" : physics.sensors.velocity
            {
                initial-state "air"

                # contact parameters
                maxNormalForce = "5000 * system.m * hypot(g)"
                normalStiffness = "5e8"
                normalDamping = "1e5"
                frictionDamping = "5e2"
                frictionCoefficient = "1.5"

                # calculate locations in base.
                #
                # [3-by-N]
                p = "LocalPointToBase(location)"

                # calculate velocities in base. The velocity sensor from which
                # we inherit separates the angular and linear velocities since
                # only the linear velocity has to be recalculated for the sensor
                # locations. Here we keep the separation and simply multiply with
                # the relevants parts of the spatial transformation.
                #
                # [3-by-N]
                dp = "localToBaseTransform[3:6, 0:3] * angularVelocity +
                      localToBaseTransform[3:6, 3:6] * linearVelocity"

                # the contact position in the normal direction (Z)
                #
                # [1-by-N]
                pN = "p[2, :]"

                # the contact velocity in the normal direction
                #
                # [1-by-N]
                dpN = "dp[2, :]"

                # the contact force due to the contact model stiffness
                #
                # [1-by-N]
                forceNormalStiffness = "normalStiffness * -pN^3"

                # the contact force due to the contact model damping
                #
                # [1-by-N]
                forceNormalDamping = "normalDamping * dpN * pN^3"

                # [1-by-N]
                forceNormal = "max(0,
                                   min(maxNormalForce,
                                       forceNormalStiffness +
                                       forceNormalDamping))"

                # tangential forces due to friction (in X and Y)
                #
                # [1-by-N]
                "forceTangential{X,Y}" = "-frictionDamping * dp[@1[!], :]"

                # maximum tangential force by simple coulomb friction
                #
                # [1-by-N]
                forceTangentialMax = "forceNormal * frictionCoefficient"

                # tangential contact forces limited by the maximum tangential force
                #
                # [1-by-N]
                "forceTangentialLimit{X,Y}" = "csign(min(abs(forceTangential@1),
                                                         forceTangentialMax),
                                                     forceTangential@1)"

                # spatial contact force at each contact point location
                #
                # [6-by-N]
                forceAtLocations = "[zeros(3, size(location, 1));
                                     forceTangentialLimitX;
                                     forceTangentialLimitY;
                                     forceNormal]"

                force = "zeros(6, 1)"

                # finally, the contact force is calculated in body coordinates
                # whereas all the previous quantities are calculated in base
                # coordinates. Here we first transform each force to the base
                # origin, sum all the forces, and then transform the resultant
                # to the body coordinate system.
                edge self | first
                {
                    force <= "Spatial.ForceTransform(baseToLocalTransform) *
                              Spatial.ForcesAtOrigin(forceAtLocations, p)" state "ground"
                }

                active = 0

                # Events used for event refinement
                event "air" to "ground" when "min(pN) < 0" within 0.001 { set active = 1 }
                event "ground" to "air" when "max(pN) > 0" within 0.001 { set active = 0 }
            }
        }
    }
}

# vi:ts=4:et
