require "spatial.cdn"
require "inertia.cdn"
require "quaternion.cdn"
require "transformations.cdn"

## Gravity vector
g = "[0; 0; -9.81]"

templates
{
    node "physics"
    {
        node "system"
        {
            m = 0
        }

        ## Basic degree of freedom node having @1 degrees of freedom. This
        ## node only defines variables for position, velocity and
        ## acceleration and the number of degree of freedoms
        node "dof{1:6}"
        {
            null = "zeros(@@1, 1)"

            defines
            {
                names = "{coordinates,velocities,accelerations}"
            }

            ## Generalized @names[@@0[!]] (i.e. DOFs of joint)
            "{q,dq,ddq}" = "null"
            dqdot = "dq"
        }

        ## Base physical body. It represents a single degree of freedom by
        ## default, but it can represent up to 6 degrees of freedom if
        ## a "dofN" template is explicitly applied (see for example
        ## spherical body).
        node "body" : "dof1"
        {
            ## Mass of the body
            m   = "1"

            ## Center of Mass of the body: 3-by-1
            com = "zeros(3, 1)"

            ## Inertia matrix of the body: 3-by-3
            I   = "Inertia.Sphere(m, 0.1)"

            ## Generalized force on the DOF of this body
            τ = "null"

            ## Joint model parameters. These parameters need to be specified
            ## for each joint type.
            node "joint"
            {
                ## Spatial joint transformation (i.e. the transformation induced
                ## by the DOF of the joint).
                JointTransform(q) = "eye(6)"

                ## Velocity across the joint in successor frame coordinates.
                JointVelocity(q, dq) = "zeros(6, 1)"

                ## The joint motion subspace. This is a matrix specifying the
                ## motion subspace of the joint. The motion subspace is defined
                ## by the partial derivative of the joint velocity towards the
                ## the generalized velocities.
                ##
                ## S = ∂v_j / ∂q̇
                MotionSubspace(q, dq) = "∂[JointVelocity; dq](q, dq)"

                ## Joint bias velocity product term. This term is non zero
                ## when the motion subspace is not a constant (i.e. depends on
                ## q).
                ##
                ## c_j = ∂S / ∂q ∙ q̇ᵀ ∙ q̇
                BiasVelocityProduct(q, dq) = "∂[MotionSubspace; q](q, dq) ∙ dqᵀ ∙ dq"
            }

            ## Helper variable to calculate the joint transform
            jointTransform = "joint.JointTransform(q)"

            ## Helper variable to calculate the joint velocity
            jointVelocity = "joint.JointVelocity(q, dq)"

            ## Helper variable to calculate the joint motion subspace
            motionSubspace = "joint.MotionSubspace(q, dq)"

            ## The motion subspace in base coordinates
            baseMotionSubspace = "localToBaseTransform ∙ motionSubspace"

            ## Helper variable to calculate the velocity product term. See
            ## joint.cJ
            cJ = "joint.BiasVelocityProduct(q, dq)"

            ## Transposed motion subspace
            motionSubspaceT = "motionSubspaceᵀ"

            ## Transposed transformation
            transformT = "transformᵀ"

            ## Coordinate translation from the body frame to the parent frame.
            ## This is a convenient variable used by the default
            ## value of the coordinateTransform variable.
            tr = "[0; 0; 0]"

            ## Coordinate transform from the parent frame to the body
            ## frame (i.e. the transformation from the origin of the joint of
            ## the parent to the origin of the joint of the body frame). The
            ## default value is a simple translation by the tr variable. Use
            ## the various method of the Spatial node for more complex
            ## transformations.
            coordinateTransform = "Spatial.Translation(tr)"

            ## The total transform from body frame to parent frame, including
            ## both the transform of the coordinate system and the transform
            ## that the joint induces (i.e. through it's generalized
            ## coordinates).
            transform = "jointTransform ∙ coordinateTransform"

            ## Spatial inertia calculated from the mass (m),
            ## center of mass (com) and inertia (I).
            spI = "Spatial.Inertia(com, m, I)"

            ## Body velocity, defaults to joint velocity.
            velocity = "jointVelocity"

            ## Body acceleration due to gravitational and coriolos effects,
            ## defaults to gravity.
            acceleration = "transform ∙ [0; 0; 0; -g] + cJ"

            ## Body jacobian column in base
            bodyJacobian = "localToBaseTransform ∙ motionSubspace"

            ## CoM jacobian column in base (only linear)
            bodyJacobianCom = "localToBaseTransform ∙ Spatial.Translation(com) ∙ motionSubspace"

            ## com in base coordinates
            comInBase = "LocalPointToBase(com)"

            ## Kinetic energy
            T = "0.5 ∙ velocityᵀ ∙ spI ∙ velocity"

            ## Potential energy
            V = "m ∙ LocalPointToBase(com)ᵀ ∙ g"

            ## Transform from the local coordinate system to base coordinate
            ## system
            baseToLocalTransform = "transform"
            localToBaseTransform = "Spatial.Inverse(baseToLocalTransform)"

            BaseForceToLocal(f, p) = "Spatial.ForceTransform(baseToLocalTransform) *
                                      Spatial.TranslateForce(f, p)"

            LocalPointToBase(p) = "Spatial.TransformPoint3(localToBaseTransform, p)"
            BasePointToLocal(p) = "Spatial.TransformPoint3(baseToLocalTransform, p)"

            BaseForceAtLocalToLocal(f, p) = "BaseForceToLocal(f,
                                                              LocalPointToBase(p))"
        }

        node "jacobian"
        {
                  location = "com"
            locationInBase = "Spatial.TransformPoint3(localToBaseTransform, location)"
                         J = "Spatial.Translation(locationInBase) * J0"
        }

        ## The joint edge forward connects two bodies in a kinematic chain.
        edge "joint"
        {
            ## Resursive computation of the transformation from base coordinates
            ## to body coordinates
            baseToLocalTransform <= "output.transform ∙ baseToLocalTransform"
        }

        edge "jacobianRebased"
        {
            r = "output.jacobianLocationInBase - input.jacobianLocationInBase"
            J = "output.jacobianJ - Spatial.Translation(r) ∙ input.jacobianJ"
        }

        node "cdof{1:6}"
        {
            null = "zeros(@@1, 1)"
            cfnull = "zeros(6, $(6 - @@1))"
            cfnullT = "zeros($(6 - @@1), 6)"
            knull = "zeros($(6 - @@1), 1)"

            constraintForceSubspaceNull = "cfnull"
            activeForceSubspaceNull = "zeros(6, @@1)"
        }

        node "cbody" : "cdof1"
        {
            initial-state "active"

            ## Active joint loop forces
            τ = "null"

            ## Coordinate translation from closing loop joint frame to its
            ## predecessor frame
            tr = "[0; 0; 0]"

            ## Coordinate transform from closing loop joint frame to its
            ## predecessor frame. This defaults to a 3d translation
            ## specified in tr
            coordinateTransformPred = "Spatial.Translation(tr)"

            ## Coordinate transform from closing loop joint frame to its
            ## successor frame. Defaults to fixed frame
            coordinateTransformSucc = "baseToLocalTransformPred" | once

            baseToLocalTransformSucc = "coordinateTransformSucc"
            baseToLocalTransformPred = "eye(6)"

            "localToBaseTransform{Succ,Pred}" = "Spatial.Inverse(baseToLocalTransform@1)"

            "baseVelocity{Succ,Pred}" = "zeros(6, 1)"

            baseAccelerationPred = "zeros(6, 1)"
            baseAccelerationSucc = "[0; 0; 0; -g]"

            constraintForceSubspace = "constraintForceSubspaceNull"
            activeForceSubspace = "activeForceSubspaceNull"

            ## The active loop joint spatial force in successor frame coordinates
            activeLoopJointForce = "Spatial.MotionToForceInverseTransform(coordinateTransformSucc) ∙ activeForceSubspace ∙ τ"

            ## The constraint force subspace transformed from loop joint in
            ## successor frame coordinates to base coordinates
            baseConstraintForceSubspace = "Spatial.MotionToForceInverseTransform(baseToLocalTransformSucc) ∙ constraintForceSubspace"

            ## The base constraint force subspace as to be applied to motion
            ## vectors (inversed)
            baseConstraintForceMotionSubspace = "Spatial.ForceToMotionInverseTransform(baseConstraintForceSubspace)"

            # Constraint stabilization
            node "stabilization"
            {
                T = "0.05"

                kα = "1 / T"
                kβ = "1 / T"

                Xstab = "baseToLocalTransformSucc * localToBaseTransformPred"
                kδ = "δ(Xstab)"

                k = "2 ∙ kα ∙ baseConstraintForceMotionSubspace ∙ (baseVelocitySucc - baseVelocityPred) +
                         kβ² ∙ kδ"
            }

            loopAcceleration = "baseAccelerationSucc - baseAccelerationPred"
            loopVelocity = "Spatial.CrossMotion(baseVelocitySucc) ∙ baseVelocityPred"
            loopMotionSubspace = "baseConstraintForceMotionSubspace"

            k = "knull"
            λ = "knull"

            edge self
            {
                k <= "-loopMotionSubspace ∙ (loopAcceleration + loopVelocity) - stabilization.k" state "active"
                k <= "knull" state "inactive"
            }
        }

        edge "cjoint" {}
    }
}

require "joints.cdn"
require "sensors.cdn"

# vi:ex:ts=4:et
