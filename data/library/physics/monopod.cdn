g = 9.81

node "monopod"
{
    defines
    {
        "q" = "{x,y,φ,α,l}"
        "q̇" = "{ẋ,ẏ,φ̇,α̇,l̇}"
        "q̈" = "{ẍ,ÿ,φ̈,α̈,l̈}"
    }

    # Masses
    "m{1:3}" = "{0.85,0.10,0.05}"

    # Inertia
    "J{1:3}" = "{0.4,0.002,0.002}"

    # Lengths
    "l{2,3}" = "{0.25,0.25}"

    # Foot position
    rfoot = "0"

    # Stiffness constants and damping ratios
    kα = 5
    b̂α = 0.2
    kl = 15
    b̂l = 0.2

    Jtot = "J2 + m2 ∙ l2² + J3 + m3 ∙ (l0 - l3)²"

    # Damping constants calculated from damping ratios
    bα = "b̂α ∙ 2 ∙ √(kl ∙ mtot)"
    bl = "b̂l ∙ 2 ∙ √(kα ∙ Jtot)"

    l0 = 1
    α0 = 0

    # States
    @q = "{0,1.1 ∙ l0,0,0,l0}"

    q = "[{@q||@0\,@1}]"
    q̇ = "[{@q̇||@0\,@1}]"

    # Note that we map q̇ on dq variables because the dq variables will be
    # introduced by the double integration (see end of file)
    @q̇ = "d{@q}"

    # Default generalized forces are 0
    "τ@q" = "{@q[~]*0}"
    τ = "[{@q|τ@0||@0;@1}]"

    rf = 0.05

    # Auxilary and common terms
    ##########################################################################
        θ = "α + φ"
        c1 = "m2 ∙ l2 + m3 ∙ (l - l3)"
        cθ = "cos(θ)"
        sθ = "sin(θ)"

        c1c = "c1 ∙ cθ"
        c1s = "c1 ∙ sθ"

        c2 = "m3 ∙ (l - l3)² + m2 ∙ l2² + J2 + J3"
        m3s = "m3 ∙ sθ"
        m3c = "-m3 ∙ cθ"
        mtot = "m1 + m2 + m3"

        θ̇ = "α̇ + φ̇"
        c3 = "-2 ∙ φ̇ ∙ (α̇ + l̇) ∙ m3 ∙ (l - l3) - c1 ∙ g ∙ sθ"
    ##########################################################################

    # Mass matrix
    M = "[mtot, 0,    c1c,     c1c, m3s;
          0,    mtot, c1s,     c1s, m3c;
          c1c,  c1s,  c2 + J1, c2,   0;
          c1c,  c1s,  c2,      c2,   0;
          m3s,  m3c,  0,       0,    m3]"

    # H matrix
    h = "[θ̇ ∙ (-2 ∙ l̇ ∙ m3 ∙ cθ + θ̇ ∙ c1s);
          -mtot ∙ g - 2 ∙ θ̇ ∙ m3 ∙ l̇ ∙ sθ - θ̇² ∙ c1c;
          c3;
          c3;
          m3 ∙ (g ∙ cθ + θ̇² ∙ (l - l3))]"

    # Passive forces on α and φ from the series elastic element
    τα = "kα ∙ (α0 - α) - bα ∙ α̇"
    τl = "kl ∙ (l0 - l) - bl ∙ l̇"

    # Finally, the accelerations solved from M, h and τ
    accelerations = "linsolve(M, h + τ + Fc)"

    # Set acceleration variables
    @q̈ = "accelerations[@0[!]]"

    # Double prime is a short hand for defining a second order system
    @q'' = "@q̈"

    yend = "y - rfoot - l ∙ cθ"

    # Contact jacobian
        Jc_tmp1 = "rfoot + l ∙ cθ"
        Jc_tmp2 = "l ∙ sθ"

    Jc = "[1, 0, Jc_tmp1, Jc_tmp1,  sθ;
           0, 1, Jc_tmp2, Jc_tmp2, -cθ]"

    kground = "100"

    FF = "kground ∙ (y - rfoot - l ∙ cθ)"
    Fc = "transpose(Jc) ∙ [0; FF]"
}

# vi:ex:ts=4:et
