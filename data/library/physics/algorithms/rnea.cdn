require "../findbodies.cdn"

# This file implements the Recursive Newton Euler algorithm for forward
# dynamics (i.e. with generalized accelerations set to 0),
# computing accelerations, velocities, forces (in joint space) and the C matrix.
#
# I.e. it computes C in the dynamics formulation: H ∙ q̈ + C = τ
templates
{
    node "physics"
    {
        ## The dynamics edge is used to transmit forces from children to
        ## parents.
        edge "dynamics"
        {
            ## Transmit force from the child to the parent frame
            forceChild += "transformT ∙ force"
        }

        edge "activeLoopJointForceSuccessor"
        {
            forceLoopJointActive += "-activeLoopJointForce"
        }

        edge "activeLoopJointForcePredecessor"
        {
            forceLoopJointActive += "-(Spatial.MotionToForceTransform(output.baseToLocalTransform) ∙
                                       forceLoopJointActiveInBase)"
        }

        edge "loopJointTransformSuccessor"
        {
            baseToLocalTransformSucc <= "output.coordinateTransformSucc ∙ baseToLocalTransform"

            baseVelocitySucc <= "localToBaseTransform ∙ velocity"
            baseAccelerationSucc <= "localToBaseTransform ∙ acceleration"
        }

        edge "loopJointTransformPredecessor"
        {
            baseToLocalTransformPred <= "output.coordinateTransformPred ∙ baseToLocalTransform"

            baseVelocityPred <= "localToBaseTransform ∙ velocity"
            baseAccelerationPred <= "localToBaseTransform ∙ acceleration"
        }

        node "rnea"
        {
            ## Force transmitted from the child to the parent, see 'force'. This
            ## force is accumulated from all cild bodies joint on this body. See
            ## the physiscs.dynamics template
            forceChild = "zeros(6, 1)"

            ## External spatial force acting on the body. This force is a 6-by-1
            ## vector containing torques and forces, acting on the local body
            ## coordinates.
            forceExternal = "zeros(6, 1)"

            ## External spatial force as a result of a loop closure joint.
            forceLoopJointActive = "zeros(6, 1)"

            forceLoopJointActiveInBase = "Spatial.MotionToForceInverseTransform(baseToLocalTransform) ∙ forceLoopJointActive"

            ## Force transmitted over the joint. This force is composed of the force
            ## coming from the acceleration and velocity acting on the spatial inertia,
            ## forces transmitted over the joint from the child, and finally external
            ## forces introduced on the body
            force = "spI ∙ acceleration + Spatial.CrossForce(velocity) ∙ spI ∙ velocity + forceChild - forceExternal + forceLoopJointActive"

            ## C matrix row of this body. The C matrix row of this body is the force
            ## transmitted on the joint
            C = "motionSubspaceT ∙ force"
        }
    }
}

edge has-template(physics.joint)
{
    ## Recursive joint velocity (from parent to child)
    velocity <= "output.transform ∙ velocity + output.jointVelocity"

    ## Recursive joint acceleration (from parent to child)
    acceleration <= "output.transform ∙ acceleration + output.cJ +
                     Spatial.CrossMotion(output.velocity) ∙ output.jointVelocity"
}

node "@bodies" : physics.rnea {}

# Add a dynamics link back up from the child to the parent
node edges | has-template(physics.joint) | output-name | input-name | parent
{
    ## Edge transmitting forces from child to parent
    edge "dynamics_@@0_to_@0" from "@@@0" to "@@@0" : physics.dynamics {}
}

# Add close loop forces calculations
edge edges | has-template(physics.cjoint) | if(output | has-template(physics.body)) : physics.activeLoopJointForceSuccessor {}
edge edges | has-template(physics.cjoint) | if(input | has-template(physics.body)) : physics.loopJointTransformPredecessor {}

node edges | has-template(physics.cjoint) | if(output | has-template(physics.body)) | output-name | input-name | parent
{
    edge "loop_joint_@@0_to_@0" from "@@@0" to "@@@0" : physics.loopJointTransformSuccessor {}
}

node edges | has-template(physics.cjoint) | if(input | has-template(physics.body)) | input-name | output | outputs | output-name | parent
{
    edge "loop_joint_@0_to_@@0" from "@@0" to "@@@@0" : physics.activeLoopJointForcePredecessor {}
}

# vi:ex:ts=4:et
