node | "@bodies" . has-template(physics.contacts.contact)
{
    event "inactive" to "active" when "min(pN) < 0" within 0.001
    {
        contactLocation = "csum((pN < 0) .* p) / (max(1, sum(pN < 0)))"
        contactJacobian = "(Spatial.Translation(p) * J0)[3:6, :]"

        J = "[contactJacobian; dynamics.K]"
        JT = "Jᵀ"

        contactVelocity = "J ∙ model.dq"

        # The operational space inertia: Λ = (J H⁻¹ Jᵀ)⁻¹
        operationalSpaceInertia = "pinv(J ∙ dynamics.invH ∙ JT)"

        # The inertia weighted jacobian pseudo inverse: J̄ = H⁻¹ Jᵀ Λ
        inertiaWeightedJacobianPseudoInverse = "dynamics.invH ∙ JT ∙ operationalSpaceInertia"

        # Velocity difference in operational space
        dv = "-(1 + coefficientOfRestitution) ∙ contactVelocity"

        # The system output velocity after impulse: q̇⁺ = H⁻¹ Jᵀ F + q̇⁻
        dqAfterImpulse = "inertiaWeightedJacobianPseudoInverse ∙ dv + model.dq"

        set   recurse(parent)
            | has-template(physics.system)
            | first .
                "@bodies".dq = "dqAfterImpulse[[{@bodydofex[$(@@1[!] + 1)]||@0\, @1}]]"

        set parent . baseToLocalTransformSucc = "baseToLocalTransformPred"

        set active = "1"
        set contactPoint = "p"
    }

    event "active" to "inactive" when "forceN < 0" within 0.001
    {
        set active = 0
    }
}

node | has-template(physics.body) . has-template(physics.contacts.hardbase) | <cname>:name | parent | <oname>:name | <cc>:append-context("@0_@@0")
{
    defines
    {
        ci = "$(@ccontactnames[!@cc] + 1)"
    }

    interface
    {
        "{K,λ}_@ci" = "@1" in "@cname"
    }
}

edge from   has-template(physics.body)
          . has-template(physics.contacts.hardbase)
          | name
          | parent
          | <oname>:name
          | <cname>:append-context("@0_@@0")
          | recurse(inputs | has-template(physics.joint) | input)
          | <ojoint>:name
          | parent . "@oname"
       to   dynamics
{
    defines
    {
        bi = "$(@bodies[!@ojoint] + 1)"
        ci = "$(@ccontactnames[!@cname] + 1)"

        c = "@{@bodydofidx[@bi]:+$(@bodydof[@bi] - 1)||@0\,@1}"
        r = "@{@ccontactconsidx[@ci]:+$(@ccontactcons[@ci] - 1)||@0;@1}"
    }

    "K[[@r], [@c]]" <= "-K_@ci * @ojoint.baseMotionSubspace"
}

edge from   has-template(physics.body)
          . has-template(physics.contacts.hardbase)
          | <ccname>:name
          | parent
          | <oname>:name
          | <cname>:append-context("@0_@@0")
       to   dynamics
{
    defines
    {
        ci = "$(@ccontactnames[!@cname] + 1)"
        r = "@{@ccontactconsidx[@ci]:+$(@ccontactcons[@ci] - 1)||@0;@1}"
    }

    "k[@r]" <= "@ccname.k"
}

edge from   dynamics
       to   has-template(physics.body)
          . has-template(physics.contacts.hardbase)
          | <ccname>:name
          | parent
          | <oname>:name
          | <cname>:append-context("@0_@@0")
{
    defines
    {
        ci = "$(@ccontactnames[!@cname] + 1)"
        r = "@{@ccontactconsidx[@ci]:+$(@ccontactcons[@ci] - 1)||@0;@1}"
    }

    "λ_@ci" <= "λ[[@r]]"
}

# vi:ts=4:et
