# Spatial inertia
Inertia(com, m, I) = "[I + m ∙ C ∙ Cᵀ, m ∙ C;
                       m ∙ Cᵀ, [m, 0, 0; 0, m, 0; 0, 0, m]]"
{
    C = "~com"
}

# Create a 6x6 translation matrix translating with 3d vector v
Translate(v) = "[ 1,     0,     0,    0, 0, 0;
                  0,     1,     0,    0, 0, 0;
                  0,     0,     1,    0, 0, 0;
                  0,     v[2], -v[1], 1, 0, 0;
                 -v[2],  0,     v[0], 0, 1, 0;
                  v[1], -v[0],  0,    0, 0, 1]"

# Spatial rotation on X axis
RotateX(θ) = "[1,  0,  0,  0,   0, 0;
               0,  cθ, sθ, 0,   0, 0;
               0, -sθ, cθ, 0,   0, 0;
               0,  0,  0,  1,   0, 0;
               0,  0,  0,  0,  cθ, sθ;
               0,  0,  0,  0, -sθ, cθ]"
{
    cθ = "cos(θ)"
    sθ = "sin(θ)"
}

# Spatial rotation on Z axis
RotateZ(θ) = "[ cθ,  sθ, 0,  0,  0,  0;
               -sθ,  cθ, 0,  0,  0,  0;
                0,   0,  1,  0,  0,  0;
                0,   0,  0,  cθ, sθ, 0;
                0,   0,  0, -sθ, cθ, 0;
                0,   0,  0,   0, 0,  1]"
{
    cθ = "cos(θ)"
    sθ = "sin(θ)"
}

# Spatial rotation on Y axis
RotateY(θ) = "[ cθ, 0, -sθ, 0,  0,  0;
                 0,  1,  0,  0,  0,  0;
                 sθ, 0,  cθ, 0,  0,  0;
                 0,  0,  0,  cθ, 0, -sθ;
                 0,  0,  0,  0,  1,  0;
                 0,  0,  0,  sθ, 0,  cθ]"
{
    cθ = "cos(θ)"
    sθ = "sin(θ)"
}

# Spatial cross product
Cross(v) = "[ 0,    -v[2],  v[1],  0,     0,     0;
              v[2],  0,    -v[0],  0,     0,     0;
             -v[1],  v[0],  0,     0,     0,     0;
              0,    -v[5],  v[4],  0,    -v[2],  v[1];
              v[5],  0,    -v[3],  v[2],  0,    -v[0];
             -v[4],  v[3],  0,    -v[1],  v[0],  0]"

# vi:ex:ts=4:et
