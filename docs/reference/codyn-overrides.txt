<FUNCTION>
<NAME>cdn_compile_context_prepend_object</NAME>
<RETURNS>void </RETURNS>
CdnCompileContext *context,CdnObject *object
</FUNCTION>
<FUNCTION>
<NAME>cdn_compile_context_append_object</NAME>
<RETURNS>void </RETURNS>
CdnCompileContext *context,CdnObject *object
</FUNCTION>
<FUNCTION>
<NAME>cdn_instruction_custom_function_new</NAME>
<RETURNS>CdnInstruction   *</RETURNS>
CdnFunction *function,gint                 arguments
</FUNCTION>
<FUNCTION>
<NAME>cdn_instruction_property_new</NAME>
<RETURNS>CdnInstruction   *</RETURNS>
CdnVariable *property,CdnInstructionBinding binding
</FUNCTION>
<STRUCT>
<NAME>CdnObjectClass</NAME>
struct _CdnObjectClass
{
	/*< private >*/
	GObjectClass parent_class;

	/*< public >*/
	gboolean      (*compile)         (CdnObject                          *object,
	                                  CdnCompileContext                  *context,
	                                  CdnCompileError                    *error);

	void          (*reset)           (CdnObject *object);

	void          (*foreach_expression) (CdnObject                *object,
	                                     CdnForeachExpressionFunc  func,
	                                     gpointer                  userdata);

	void          (*apply_template)  (CdnObject *object,
	                                  CdnObject *templ);

	void          (*copy)            (CdnObject *object,
	                                  CdnObject *source);

	GType         (*get_copy_type)   (CdnObject *object);

	void          (*taint)           (CdnObject *object);

	GSList       *(*get_properties)  (CdnObject    *object);
	CdnVariable  *(*get_property)    (CdnObject    *object,
	                                  const gchar  *name);

	gboolean      (*has_property)    (CdnObject    *object,
	                                  const gchar  *name);

	CdnVariable  *(*add_property)    (CdnObject    *object,
	                                  const gchar  *name,
	                                  const gchar  *expression,
	                                  gboolean      integrated);

	gboolean      (*remove_property) (CdnObject    *object,
	                                  const gchar  *name,
	                                  GError      **error);

	gboolean      (*verify_remove_property) (CdnObject    *object,
	                                         const gchar  *name,
	                                         GError      **error);

	void          (*clear)           (CdnObject    *object);

	gboolean      (*equal)           (CdnObject    *first,
	                                  CdnObject    *last);

	/* signals */
	void          (*compiled)        (CdnObject *object);
	void          (*resetted)        (CdnObject *object);
	void          (*tainted)         (CdnObject *object);

	void          (*property_added)   (CdnObject   *object,
	                                   CdnVariable *property);
	void          (*property_removed) (CdnObject   *object,
	                                   CdnVariable *property);
	void          (*property_changed) (CdnObject   *object,
	                                   CdnVariable *property);
};
</STRUCT>
<FUNCTION>
<NAME>cdn_object_compile</NAME>
<RETURNS>gboolean		  </RETURNS>
CdnObject         *object,CdnCompileContext *context,CdnCompileError *error
</FUNCTION>
<FUNCTION>
<NAME>cdn_monitor_new</NAME>
<RETURNS>CdnMonitor		 *</RETURNS>
CdnNetwork *network,CdnVariable          *property,
</FUNCTION>
