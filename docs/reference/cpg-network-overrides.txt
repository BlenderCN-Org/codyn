<FUNCTION>
<NAME>cpg_compile_context_prepend_object</NAME>
<RETURNS>void </RETURNS>
CpgCompileContext *context,CpgObject *object
</FUNCTION>
<FUNCTION>
<NAME>cpg_compile_context_append_object</NAME>
<RETURNS>void </RETURNS>
CpgCompileContext *context,CpgObject *object
</FUNCTION>
<FUNCTION>
<NAME>cpg_instruction_custom_function_new</NAME>
<RETURNS>CpgInstruction   *</RETURNS>
CpgFunction *function,gint                 arguments
</FUNCTION>
<FUNCTION>
<NAME>cpg_instruction_property_new</NAME>
<RETURNS>CpgInstruction   *</RETURNS>
CpgProperty *property,CpgInstructionBinding binding
</FUNCTION>
<STRUCT>
<NAME>CpgObjectClass</NAME>
struct _CpgObjectClass {
	/*< private >*/
	GObjectClass parent_class;

	/*< public >*/	
	gboolean (*compile)	(CpgObject *object,
	                     CpgCompileContext *context,
	                     CpgCompileError *error);
	void (*reset)		(CpgObject *object);
	void (*evaluate)	(CpgObject *object);
	
	void (*tainted)		(CpgObject *object);
	
	void (*reset_cache) (CpgObject *object);
	
	void (*copy)		(CpgObject *object,
	                     CpgObject *source);
};
</STRUCT>
<FUNCTION>
<NAME>cpg_object_compile</NAME>
<RETURNS>gboolean		  </RETURNS>
CpgObject         *object,CpgCompileContext *context,CpgCompileError *error
</FUNCTION>
<FUNCTION>
<NAME>cpg_monitor_new</NAME>
<RETURNS>CpgMonitor		 *</RETURNS>
CpgNetwork *network,CpgObject          *object,const gchar        *property_name
</FUNCTION>
<FUNCTION>
<NAME>cpg_property_new</NAME>
<RETURNS>CpgProperty 	  *</RETURNS>
const gchar        *name,const gchar        *expression,gboolean            integrated,CpgObject *object
</FUNCTION>
